import numpy as np


def ackley_function(x, a=20, b=0.2, c=2*np.pi):
    t1 = -a * np.exp(-b * np.sqrt(np.mean(x**2)))
    t2 = -np.exp(np.mean(np.cos(c * x)))
    return t1 + t2 + a + np.exp(1)


def hill_climbing(obj_func, bounds, max_iter=1000, step_size=0.1, tolerance=1e-5):
    solution = np.random.uniform(bounds[0], bounds[1])
    best_solution = solution
    best_value = obj_func(best_solution)

    for _ in range(max_iter):
        neighbor = best_solution + \
            np.random.uniform(-step_size, step_size, size=solution.shape)
        neighbor = np.clip(neighbor, bounds[0], bounds[1])
        neighbor_value = obj_func(neighbor)

        if neighbor_value < best_value:
            best_solution = neighbor
            best_value = neighbor_value

        if np.abs(best_value - obj_func(solution)) < tolerance:
            break

    return best_solution, best_value


if __name__ == "__main__":
    bounds = (-5, 5)
    solution, value = hill_climbing(
        ackley_function, (np.array(bounds), np.array(bounds)))
    print("Optimal Solution:", solution)
    print("Optimal Value:", value)
